#!/usr/bin/python2

import sys
import logging
import argparse
from os.path import basename
from subprocess import Popen
from gi.repository import GObject, Notify
import gconf
import gnomekeyring
import dateutil.parser, dateutil.tz
import imaplib
import email, email.header, re

class MailNotifier(object):
    def __init__(self, username, password, check_every_n_minutes=5, timeout=1):
        self.username = username
        self.password = password
        self.last_encoding = None

        Notify.init(self.username)
        self.notified = []

        GObject.timeout_add(int(check_every_n_minutes * 60000), self.check_for_new)
        self.check_for_new()

    def connect(self):
        gmail = imaplib.IMAP4_SSL("imap.gmail.com")
        gmail.login(self.username, self.password)
         # selecting here because in testing searches sometimes didn't yield
        # results unless a select was remade.
        gmail.select("inbox")
        return gmail

    def _decode_header(self, header):
        header = re.sub(r"(=\?.*\?=)(?!$)", r"\1 ", header)
        header_data = email.header.decode_header(header)
        segments = []
        for segment_data, segment_encoding in header_data:
            if segment_encoding:
                segments.append(segment_data.decode(segment_encoding))
            else:
                segments.append(segment_data)
        return ''.join(segments)

    def check_for_new(self):
        gmail = self.connect()
        result, data = gmail.uid("search", None, "(UNSEEN)")
        if result == "OK":
            uids = data[0].split()
            for uid in uids:
                if uid not in self.notified:
                    result, data = gmail.uid("fetch", uid, "(BODY[HEADER.FIELDS (FROM SUBJECT DATE)])")
                    if result == "OK":
                        # since we fetched, email was flagged as SEEN. we must
                        # unflag it.
                        gmail.uid("store", uid, '-FLAGS', '\SEEN')

                        raw_email = data[0][1]
                        m = email.message_from_string(raw_email)

                        # we must decode our header
                        title = self._decode_header(m['Subject'])

                        body = "from <i>" + self._decode_header(m['From']) + "</i>" + \
                                ", @" + dateutil.parser.parse(m['Date']).\
                                        astimezone(dateutil.tz.tzlocal()).\
                                        strftime("%d %b %Y %H:%M")

                        notification = Notify.Notification()
                        notification.set_property("icon-name", "mail-unread")
                        notification.set_property("summary", title)
                        notification.set_property("body", body)
                        notification.set_category("email.arrived")
                        notification.add_action("default", "Open client", self.open_client, None, None)
                        notification.add_action("mark-read", "Mark as read", lambda n, a, d, uid=uid: self.mark_as_read(uid), None, None)
                        notification.add_action("trash", "Trash", lambda n, a, d, uid=uid: self.trash(uid), None, None)
                        notification.add_action("archive", "Archive", lambda n, a, d, uid=uid: self.archive(uid), None, None)
                        notification.show()
                        self.notified.append(uid)

        gmail.logout()
        return True

    def mark_as_read(self, uid):
        gmail = self.connect()
        gmail.uid("store", uid, '+FLAGS', '\SEEN')
        gmail.logout()

    def archive(self, uid):
        gmail = self.connect()

        result = gmail.uid("copy", uid, "[Gmail]/All Mail")
        if result[0] == "OK":
            gmail.uid("store", uid, "+FLAGS", "\DELETED")
            gmail.expunge()
        gmail.logout()

    def trash(self, uid):
        gmail = self.connect()
        gmail.uid("copy", uid, "[Gmail]/Trash")
        gmail.logout()

    def open_client(self, *args):
        Popen([basename(gconf.client_get_default().\
                get("/desktop/gnome/url-handlers/mailto/command").\
                get_string().split()[0])])

class MailNotifiersHandler(object):
    def __init__(self):
        if len(sys.argv) > 1:
            p = argparse.ArgumentParser(description="GMail notifier")
            subparsers = p.add_subparsers()

            p_add = subparsers.add_parser('add')
            p_add.add_argument('--username', '-u', type=str)
            p_add.add_argument('--password', '-p', type=str)
            p_add.set_defaults(func=self.add_account)
            args = p.parse_args()
            args.func(args)

        accounts = []
        for id in gnomekeyring.list_item_ids_sync("login"):
            item = gnomekeyring.item_get_info_sync("login", id)
            if item.get_display_name().startswith("mailnot"):
                username = item.get_display_name().split(":")[1]
                password = item.get_secret()
                accounts.append((username, password))

        if len(accounts) == 0:
            logging.error("No configured account.\n \
                    Please add an account with\n \
                    \tmailnot add -u LOGIN -p PASSWORD")
            sys.exit()

        for account in accounts:
            logging.info("will check emails for " + account[0])
            MailNotifier(account[0], account[1])
        GObject.MainLoop().run()

    def add_account(self, args):
        if args.username and args.password:
            gnomekeyring.item_create_sync("login", gnomekeyring.ITEM_NETWORK_PASSWORD,
                    "mailnot:" + args.username, {}, args.password, False)
            sys.exit()

if __name__ == "__main__":
    MailNotifiersHandler()
