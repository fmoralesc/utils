#!/usr/bin/python2

import sys
import logging
import argparse
from os.path import basename
from subprocess import Popen
from gi.repository import GObject, Notify
import gconf
import gnomekeyring
import dateutil.parser
import dateutil.tz
import requests
import feedparser

class MailNotifier(object):
    def __init__(self, username, password, check_every_n_minutes=30, timeout=1):
        Notify.init(username)
        self.seen_emails = []

        GObject.timeout_add(int(check_every_n_minutes * 60000), self.check_feed, username, password, timeout)
        self.check_feed(username, password, timeout)

    def check_feed(self, username, password, timeout, *args):
        logging.info("mailnot: checking feed for " + username)
        try:
            feed_data = requests.get("https://mail.google.com/mail/feed/atom", \
                    auth=(username, password), timeout=timeout).text
        except:
            return True

        try:
            feed = feedparser.parse(feed_data)
        except:
            return True

        for email in self.seen_emails:
            email.close()
        self.seen_emails = []

        if feed.feed.fullcount > 0:
            logging.info("mailnot:\t got " + feed.feed.fullcount + " emails")
            for entry in feed.entries:
                title = entry.title
                body = "from <i>" + entry.author_detail.name + \
                        " ("+ entry.author_detail.email + ")</i>" + \
                        ", @" + dateutil.parser.parse(entry.issued).\
                                    astimezone(dateutil.tz.tzlocal()).\
                                    strftime("%d %b %Y %H:%M")

                notification = Notify.Notification()
                notification.set_property("icon-name", "mail-unread")
                notification.set_property("summary", title)
                notification.set_property("body", body)
                notification.set_category("email.arrived")
                notification.add_action("default", "Open client", self.open_client, None, None)
                notification.show()
                self.seen_emails.append(notification)
        return True

    def open_client(self, *args):
        Popen([basename(gconf.client_get_default().\
                get("/desktop/gnome/url-handlers/mailto/command").\
                get_string().split()[0])])

class MailNotifiersHandler(object):
    def __init__(self):
        if len(sys.argv) > 1:
            p = argparse.ArgumentParser(description="GMail notifier")
            subparsers = p.add_subparsers()

            p_add = subparsers.add_parser('add')
            p_add.add_argument('--username', '-u', type=str)
            p_add.add_argument('--password', '-p', type=str)
            p_add.set_defaults(func=self.add_account)
            args = p.parse_args()
            args.func(args)

        accounts = []
        for id in gnomekeyring.list_item_ids_sync("login"):
            item = gnomekeyring.item_get_info_sync("login", id)
            if item.get_display_name().startswith("mailnot"):
                username = item.get_display_name().split(":")[1]
                password = item.get_secret()
                accounts.append((username, password))

        if len(accounts) == 0:
            logging.error("No configured account.\n \
                    Please add an account with\n \
                    \tmailnot add -u LOGIN -p PASSWORD")
            sys.exit()

        for account in accounts:
            logging.info("will check emails for " + account[0])
            MailNotifier(account[0], account[1])
        GObject.MainLoop().run()

    def add_account(self, args):
        if args.username and args.password:
            gnomekeyring.item_create_sync("login", gnomekeyring.ITEM_NETWORK_PASSWORD,
                    "mailnot:" + args.username, {}, args.password, False)
            sys.exit()

if __name__ == "__main__":
    MailNotifiersHandler()
