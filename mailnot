#!/usr/bin/python2

import sys
import logging
import argparse
from os.path import basename
from subprocess import Popen
from gi.repository import GObject, Notify, GnomeKeyring, GLib, GConf
import dateutil.parser, dateutil.tz
import imaplib
import email, email.header, re

class MailNotifier(object):
    def __init__(self, username, password, check_every_n_minutes=0.5, timeout=1):
        self.username = username
        self.password = password
        self.last_encoding = None

        Notify.init(self.username)
        self.notifs = {}

        GObject.timeout_add(int(check_every_n_minutes * 60000), self.check_for_new)
        self.check_for_new()

    def connect(self):
        gmail = imaplib.IMAP4_SSL("imap.gmail.com")
        gmail.login(self.username, self.password)
         # selecting here because in testing searches sometimes didn't yield
        # results unless a select was remade.
        gmail.select("inbox")
        return gmail

    def _decode_header(self, header):
        header = re.sub(r"(=\?.*\?=)(?!$)", r"\1 ", header)
        header_data = email.header.decode_header(header)
        segments = []
        for segment_data, segment_encoding in header_data:
            if segment_encoding:
                segments.append(segment_data.decode(segment_encoding))
            else:
                segments.append(segment_data)
        return ''.join(segments)

    def check_for_new(self):
#        for notif in self.notifs:
#            self.notifs[notif].close()

        logging.info("checking...")

        try:
            gmail = self.connect()
        except:
            return True

        result, data = gmail.uid("search", None, "(UNSEEN)")
        if result == "OK":
            uids = data[0].split()
            logging.info("... got " + str(len(uids)) + " unread emails" )
            for uid in uids:
                if uid not in self.notifs:
                    result, data = gmail.uid("fetch", uid, "(BODY[HEADER.FIELDS (FROM SUBJECT DATE)])")
                    if result == "OK":
                        # since we fetched, email was flagged as SEEN. we must
                        # unflag it.
                        gmail.uid("store", uid, '-FLAGS', '\SEEN')

                        raw_email = data[0][1]
                        m = email.message_from_string(raw_email)

                        # we must decode our header
                        title = self._decode_header(m['Subject'])

                        body = "from <i>" + self._decode_header(m['From']) + "</i>" + \
                                ", @" + dateutil.parser.parse(m['Date']).\
                                        astimezone(dateutil.tz.tzlocal()).\
                                        strftime("%d %b %Y %H:%M")

                        notification = Notify.Notification()
                        notification.set_property("icon-name", "mail-unread")
                        notification.set_property("summary", title)
                        notification.set_property("body", body)
                        notification.set_category("email.arrived")
                        notification.add_action("default", "Open client", lambda n, a, d, uid=uid: self.open_client(uid), None, None)
                        notification.add_action("read", "Mark as read", lambda n, a, d, uid=uid: self.mark_as_read(uid), None, None)
                        notification.add_action("trash", "Trash", lambda n, a, d, uid=uid: self.trash(uid), None, None)
                        notification.add_action("archive", "Archive", lambda n, a, d, uid=uid: self.archive(uid), None, None)
                        notification.show()
                        self.notifs[uid] = notification

        gmail.logout()
        return True

    def mark_as_read(self, uid):
        logging.info("mark as read " + str(uid))
        gmail = self.connect()
        gmail.uid("store", uid, '+FLAGS', '\SEEN')
        gmail.logout()
        del self.notifs[uid]

    def archive(self, uid):
        logging.info("achive " + str(uid))
        gmail = self.connect()

        result = gmail.uid("copy", uid, "[Gmail]/All Mail")
        if result[0] == "OK":
            gmail.uid("store", uid, "+FLAGS", "\DELETED")
            gmail.expunge()
        gmail.logout()
        del self.notifs[uid]

    def trash(self, uid):
        logging.info("trash " + str(uid))
        gmail = self.connect()
        gmail.uid("copy", uid, "[Gmail]/Trash")
        gmail.logout()
        del self.notifs[uid]

    def open_client(self, uid):
        logging.info("opening client")
        del self.notifs[uid]
        c = GConf.Client.get_default()
        val = c.get("/desktop/gnome/url-handlers/mailto/command")
        Popen([basename(val.get_string().split()[0])])

class MailNotifiersHandler(object):
    def __init__(self):
        if len(sys.argv) > 1:
            p = argparse.ArgumentParser(description="GMail notifier")
            subparsers = p.add_subparsers()

            p_add = subparsers.add_parser('add')
            p_add.add_argument('--username', '-u', type=str)
            p_add.add_argument('--password', '-p', type=str)
            p_add.set_defaults(func=self.add_account)
            args = p.parse_args()
            args.func(args)

        accounts = []
        result, k_data = GnomeKeyring.list_item_ids_sync("login")
        if result == GnomeKeyring.Result.OK:
            for id in k_data:
                result, item = GnomeKeyring.item_get_info_sync("login", id)
                if result == GnomeKeyring.Result.OK:
                    if item.get_display_name().startswith("mailnot"):
                        username = item.get_display_name().split(":")[1]
                        password = item.get_secret()
                        accounts.append((username, password))

        if len(accounts) == 0:
            logging.error("No configured account.\n \
                    Please add an account with\n \
                    \tmailnot add -u LOGIN -p PASSWORD")
            sys.exit()

        for account in accounts:
            logging.info("will check emails for " + account[0])
            MailNotifier(account[0], account[1])
        GObject.MainLoop().run()

    def add_account(self, args):
        if args.username and args.password:
            GnomeKeyring.item_create_sync("login", GnomeKeyring.ItemType.NETWORK_PASSWORD,
                    "mailnot:" + args.username, GLib.Array(), args.password, False)
            sys.exit()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    MailNotifiersHandler()
