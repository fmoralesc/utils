#!/usr/bin/python2

import sys
import logging
import argparse
from os.path import basename
from subprocess import Popen
from gi.repository import GObject, Notify
import gconf
import gnomekeyring
import dateutil.parser, dateutil.tz
import imaplib
import email, email.header

class MailNotifier(object):
    def __init__(self, username, password, check_every_n_minutes=5, timeout=1):
        self.username = username
        self.password = password

        Notify.init(self.username)
        self.notifs = []

        self.connect_imap()
        GObject.timeout_add(int(check_every_n_minutes * 60000), self.check_for_new)
        self.check_for_new()

    def connect_imap(self):
        self.G = imaplib.IMAP4_SSL("imap.gmail.com")
        self.G.login(self.username, self.password)
        self.G.select("inbox")

    def check_for_new(self):
        # clear notifications
        for notif in self.notifs:
            notif.close()
        self.notifs = []

        result, data = self.G.uid("search", None, "(UNSEEN)")
        if result == "OK":
            uids = data[0].split()
            for uid in uids:
                result, data = self.G.uid("fetch", uid, "(BODY[HEADER.FIELDS (FROM SUBJECT DATE)])")
                if result == "OK":
                    raw_email = data[0][1]
                    m = email.message_from_string(raw_email)

                    # we must decode our header
                    raw_subject = m['Subject']
                    data, encoding = email.header.decode_header(raw_subject)[0]
                    if encoding:
                        title = data.decode(encoding)
                    else:
                        title = data

                    body = "from <i>" + m['From'] + "</i>" + \
                            ", @" + dateutil.parser.parse(m['Date']).\
                                    astimezone(dateutil.tz.tzlocal()).\
                                    strftime("%d %b %Y %H:%M")

                    notification = Notify.Notification()
                    notification.set_property("icon-name", "mail-unread")
                    notification.set_property("summary", title)
                    notification.set_property("body", body)
                    notification.set_category("email.arrived")
                    notification.add_action("default", "Open client", self.open_client, None, None)
                    notification.show()
                    self.notifs.append(notification)
        return True

    def open_client(self, *args):
        Popen([basename(gconf.client_get_default().\
                get("/desktop/gnome/url-handlers/mailto/command").\
                get_string().split()[0])])

class MailNotifiersHandler(object):
    def __init__(self):
        if len(sys.argv) > 1:
            p = argparse.ArgumentParser(description="GMail notifier")
            subparsers = p.add_subparsers()

            p_add = subparsers.add_parser('add')
            p_add.add_argument('--username', '-u', type=str)
            p_add.add_argument('--password', '-p', type=str)
            p_add.set_defaults(func=self.add_account)
            args = p.parse_args()
            args.func(args)

        accounts = []
        for id in gnomekeyring.list_item_ids_sync("login"):
            item = gnomekeyring.item_get_info_sync("login", id)
            if item.get_display_name().startswith("mailnot"):
                username = item.get_display_name().split(":")[1]
                password = item.get_secret()
                accounts.append((username, password))

        if len(accounts) == 0:
            logging.error("No configured account.\n \
                    Please add an account with\n \
                    \tmailnot add -u LOGIN -p PASSWORD")
            sys.exit()

        for account in accounts:
            logging.info("will check emails for " + account[0])
            MailNotifier(account[0], account[1])
        GObject.MainLoop().run()

    def add_account(self, args):
        if args.username and args.password:
            gnomekeyring.item_create_sync("login", gnomekeyring.ITEM_NETWORK_PASSWORD,
                    "mailnot:" + args.username, {}, args.password, False)
            sys.exit()

if __name__ == "__main__":
    MailNotifiersHandler()
